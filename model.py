import tensorflow as tf

class MyModel(tf.keras.Model):
    def __init__(self):
        super(MyModel, self).__init__()
        self.conv_layer1 = tf.keras.layers.Conv3D(filters=16, kernel_size=(3, 3, 3),strides=1,padding ='same',activation='relu')
        self.batch_layer1 = tf.keras.layers.BatchNormalization(momentum=0.1, epsilon=1e-5, gamma_initializer="uniform")
        self.drop_layer1 = tf.keras.layers.Dropout(0.1)
        self.conv_layer2 = tf.keras.layers.Conv3D(filters=32, kernel_size=(3, 3, 3),strides=1,padding ='same',activation='relu')
        self.batch_layer2 = tf.keras.layers.BatchNormalization(momentum=0.15, epsilon=1e-5, gamma_initializer="uniform")
        self.drop_layer2 = tf.keras.layers.Dropout(0.2)
        self.pooling_layer1 = tf.keras.layers.MaxPool3D(pool_size=2,strides=2,padding='same')

        self.conv_layer3 = tf.keras.layers.Conv3D(filters=64, kernel_size=(5, 5, 5),strides=1,padding ='same',activation='relu')
        self.batch_layer3 = tf.keras.layers.BatchNormalization(momentum=0.15, epsilon=1e-5, gamma_initializer="uniform")
        self.drop_layer3 = tf.keras.layers.Dropout(0.2)
        self.conv_layer4 = tf.keras.layers.Conv3D(filters=32, kernel_size=(3, 3, 3),strides=1,padding ='same',activation='relu')
        self.batch_layer4 = tf.keras.layers.BatchNormalization(momentum=0.15, epsilon=1e-5, gamma_initializer="uniform")
        self.drop_layer4 = tf.keras.layers.Dropout(0.2)
        self.flatten_layer = tf.keras.layers.Flatten()

        self.dense_layer1 =  tf.keras.layers.Dense(units=4096, activation='relu')
        self.dense_drop_layer1 =  tf.keras.layers.Dropout(0.05)
        self.dense_layer2 =  tf.keras.layers.Dense(units=1024, activation='relu')
        self.dense_drop_layer2 =  tf.keras.layers.Dropout(0.05)
        self.dense_layer3 =  tf.keras.layers.Dense(units=256, activation='relu')
        self.dense_drop_layer3 =  tf.keras.layers.Dropout(0.05)
        self.output_layer =  tf.keras.layers.Dense(units=10, activation='softmax')
    def call(self,inputs):
        x = self.conv_layer1(inputs)
        x = self.batch_layer1(x)
        x = self.drop_layer1(x)
        x = self.conv_layer2(x)
        x = self.batch_layer2(x)
        x = self.drop_layer2(x)
        x = self.pooling_layer1(x)
        x = self.conv_layer3(x)
        x = self.batch_layer3(x)
        x = self.drop_layer3(x)

        x = self.conv_layer4(x)
        x = self.batch_layer4(x)
        x = self.drop_layer4(x)
        x = self.flatten_layer(x)
        x = self.dense_layer1(x)
        x = self.dense_drop_layer1(x)
        x = self.dense_layer2(x)
        x = self.dense_drop_layer2(x)
        x = self.dense_layer3(x)
        x = self.dense_drop_layer3(x)
        return self.output_layer(x)


# model = MyModel()
# adam = tf.keras.optimizers.Adam(learning_rate=0.002, beta_1=0.9, beta_2=0.999, amsgrad=True)
# model.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['acc'])
# model.build(input_shape=(None, 16,16,16,3))
# print(model.summary())